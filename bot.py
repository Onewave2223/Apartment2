import os
import logging
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
import pytz

# üîë –¢–æ–∫–µ–Ω –∏ chat_id
TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
ALLOWED_USERS = [int(CHAT_ID)]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)

# üßπ –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
async def clear_chat(context: ContextTypes.DEFAULT_TYPE):
    try:
        updates = await bot.get_updates()
        for update in updates:
            if update.message and update.message.chat.id == int(CHAT_ID):
                await bot.delete_message(chat_id=CHAT_ID, message_id=update.message.message_id)
        logging.info("–ß–∞—Ç –æ—á–∏—â–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {e}")

# üü¢ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã...")

# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))

    scheduler = BackgroundScheduler(timezone=pytz.utc)
    scheduler.add_job(lambda: app.create_task(clear_chat(None)), 'interval', days=7)
    scheduler.start()

    app.run_polling()